package views

import (
    "fmt"
    "os"

    "github.com/bradshjg/ghec-migrator/services"
)

type AuthenticationData struct {
    ClientType services.ClientType
    Exists bool
    Valid bool
    ErrMessage string
}

type IndexData struct {
	Source AuthenticationData
	Target AuthenticationData
}

func tokenURL(clientType services.ClientType) string {
    var url string
	if clientType == services.Source {
		url = os.Getenv("GITHUB_ENTERPRISE_SOURCE_URL")
	}
	if url == "" {
		url = "https://github.com"
	}
	return fmt.Sprintf("%s/settings/tokens/new", url)
}

templ runMigrationForm() {
    <div style="display: flex; flex-direction: column; align-items: center; margin-top: 2em;">
        <button type="submit" hx-post="/run" hx-include="[name='source-org'], [name='source-repo'], [name='target-org']" hx-target="#run-migration" hx-indicator="#run-migration-spinner">
            start migration
        </button>
        <img id="run-migration-spinner" class="htmx-indicator" src="/static/img/bars.svg" width="50" height="50"/>
    </div>
    <div id="run-migration"></div>
}

templ token(data AuthenticationData) {
    <div style="width: 30%;">
        if !data.Valid {
            @tokenForm(data)
        } else {
            <div hx-get="/orgs" hx-trigger="load" hx-include="find [name='client']">
                <input type="hidden" name="client" value={data.ClientType} />
            </div>
        }
    </div>
}

templ clearTokensForm() {
    <form method="post" action="/tokens/reset" style="margin-top: 2em;">
        <button type="submit">reset tokens</button>
    </form>
}

templ tokenForm(data AuthenticationData) {
        <form method="post" action="/token">
            <div style="display: flex; flex-direction: column;">
                <label for={data.ClientType}>
                    <a href={tokenURL(data.ClientType)} target="_blank" rel="noopener noreferrer">
                        {data.ClientType} PAT
                    </a>
                    (repo, admin:org, workflow scopes)
                </label>
                <div>
                    <input type="hidden" name="client" value={data.ClientType} />
                    <input id={data.ClientType} name="token" type="password" required style="margin-top: 1em;"/>
                    <button type="submit">set</button>
                </div>
            </div>
        </form>
        if (data.Exists) {
            <p style="color: red">{data.ErrMessage}</p>
        }
}

templ indexContent(data IndexData) {
    <div style="display: flex; align-items: flex-start; justify-content: space-between; margin-top: 10em; width: 50%; margin-left: auto; margin-right: auto;">
        @token(data.Source)
        @token(data.Target)
    </div>
}

templ Index(data IndexData) {
	@Base() {
		@indexContent(data)
        <div style="display: flex; flex-direction: column; align-items: center; width: 80%; margin-left: auto; margin-right: auto;">
        if (data.Source.Exists || data.Target.Exists) {
            @clearTokensForm()
        }
        if (data.Source.Valid && data.Target.Valid) {
            @runMigrationForm()
        }
        </div>
	}
}
